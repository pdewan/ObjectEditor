package bus.uigen.controller.menus;import util.trace.uigen.MenuItemCreated;import bus.uigen.uiFrame;import bus.uigen.attributes.AttributeManager;import bus.uigen.attributes.AttributeNames;import bus.uigen.controller.MethodInvocationManager;import bus.uigen.introspect.IntrospectUtility;import bus.uigen.introspect.MethodDescriptorProxy;import bus.uigen.loggable.ACompositeLoggable;import bus.uigen.reflect.MethodProxy;import bus.uigen.widgets.VirtualMenuItem;import bus.uigen.widgets.events.VirtualActionEvent;import bus.uigen.widgets.events.VirtualActionListener;
public class VirtualMethodMenuItem extends MethodMenuItem implements VirtualActionListener {
  MethodProxy virtualMethod;  MethodProxy preMethod = null;  boolean implicitRefresh = true;  MethodDescriptorProxy md = null;  uiFrame frame = null;  String fullName;  char shortCut;
 
  
  public MethodProxy getVirtualMethod() {
    return virtualMethod;
  }

  

  public VirtualMethodMenuItem(uiFrame theFrame, String methodName, MethodProxy m, MethodDescriptorProxy theMD) {
    //super(methodName, (Method) null);    super(methodName);
    virtualMethod = m;    frame = theFrame;    getMenuItem().addActionListener(this);    md = theMD;    implicitRefresh = (Boolean) AttributeManager.getInheritedAttributeValue(md, AttributeNames.IMPLICIT_REFRESH, null);
  }  public VirtualMethodMenuItem(uiFrame theFrame, Object theTargetObject, 		  MethodProxy m, VirtualMenuItem theMenuItem) {	    //super(theTargetObject, null, theMenuItem);	    super(theTargetObject, theMenuItem);	    virtualMethod = m;	    preMethod = IntrospectUtility.getPre(virtualMethod, ACompositeLoggable.getTargetClass(theTargetObject));	    dynamicCommandParams[0] = m.getName();	    frame = theFrame;	    getMenuItem().addActionListener(this);	    MethodDescriptorProxy theMD = IntrospectUtility.toMethodDescriptor(m);	    String toolTipText = AMethodProcessor.getToolTipText(theFrame, theMD);	    if (toolTipText != null && toolTipText != "")	    	getMenuItem().setToolTipText(toolTipText);	    	  }  public VirtualMethodMenuItem(uiFrame theFrame, Object theTargetObject, 		  String methodName, MethodProxy m, MethodDescriptorProxy theMD) {	    //super(theTargetObject, methodName, null);	    super(theTargetObject, methodName);	    virtualMethod = m;	    preMethod = IntrospectUtility.getPre(virtualMethod, ACompositeLoggable.getTargetClass(theTargetObject));	    dynamicCommandParams[0] = m.getName();	    frame = theFrame;	    getMenuItem().addActionListener(this);	    String toolTipText = AMethodProcessor.getToolTipText(theFrame, theMD);	    if (toolTipText != null && toolTipText != "")	    	getMenuItem().setToolTipText(toolTipText);	    md = theMD;	    implicitRefresh = (Boolean) AttributeManager.getInheritedAttributeValue(md, AttributeNames.IMPLICIT_REFRESH, null);	    MenuItemCreated.newCase (theTargetObject, methodName, m, theMD, this);	  }
/*
  public uiVirtualMethodMenuItem(String constructorName, Constructor c) {
    //super(constructorName, c);    super(constructorName);    getMenuItem().addActionListener(this);
  }  */    public void registerFullName(String theFullName) {	  if (theFullName.equals(fullName))		  return;	  frame.getKeyShortCuts().registerCommand(theFullName, this);	  fullName = theFullName;  }  static Object[] nullParams = {};  String[] dynamicCommandParams = new String[1];  public void checkPre() {	  try {		  //Object[] params = {};		  		  //VirtualMethod preMethod = uiBean.getPre(method, object.getClass());		  if (preMethod == null || targetObject == null)		  	this.getMenuItem().setEnabled(true);		  else if (virtualMethod.isDynamicCommand()) {			  			  //Object[] params = {};				  boolean result = ((Boolean) preMethod.invoke(targetObject, dynamicCommandParams)).booleanValue();			  this.getMenuItem().setEnabled(result);			  		  } else {			  	  			  boolean result = ((Boolean) preMethod.invoke(targetObject, nullParams)).booleanValue();			  this.getMenuItem().setEnabled(result);		  }	  } catch (Exception e) {		  this.getMenuItem().setEnabled(true);	  }	    }    public void actionPerformed(VirtualActionEvent e) {	  //processMethodMenuItem (this);	  processMethodMenuItem ();  }  public void processMethodMenuItem   (/*uiVirtualMethodMenuItem item*/) {	  	VirtualMethodMenuItem item = this;		//if (item.getConstructor()   != null) {		if (item.getVirtualMethod().isConstructor()) {			//System.out.println("executing constructor");			//Constructor constructor =   item.getConstructor();			MethodProxy constructor = item.getVirtualMethod();			MethodInvocationManager   iman = new MethodInvocationManager(frame, null, constructor);			return;		}		if  (item.getVirtualMethod() == null) return;		MethodProxy method   = item.getVirtualMethod();		Object object = item.getTargetObject();				if (frame != null) {			frame.setRefreshWillHappen(!implicitRefresh);			frame.processMethod(object, method);			frame.setRefreshWillHappen(false);		} else			if (method != null) {			      bus.uigen.controller.MethodInvocationManager iman = new bus.uigen.controller.MethodInvocationManager(frame, targetObject,												     method);				//uiMethodInvocationManager iman = new uiMethodInvocationManager(targetObject, method);									 			    //frame.doImplicitRefresh();			    }		/*		//print(currentAdapters);		//Enumeration   adapters = currentAdapters.elements();		Enumeration adapters = adapterHistory.elements();		boolean foundMultipleObjects = false;		Object targetObject =   null;		Class   c;		uiObjectAdapter adapter;				while   (adapters.hasMoreElements()) {		adapter =   ((uiObjectAdapter) adapters.nextElement());		c   = adapter.getPropertyClass();		primitiveClassList list =   new primitiveClassList();		Object object;		if (list.isPrimitiveClass(c.getName())) {		object =adapter.getValue();		System.out.println("primitive class");				}   else		object = adapter.getRealObject();		//System.out.println("trying adapter:" + adapter + "object" +    object);		if (object !=   null && method.getDeclaringClass().isAssignableFrom(object.getClass())) {		//  System.out.println("successful: " + method.getDeclaringClass() + object.getClass());		if (targetObject != null && targetObject != object) {		foundMultipleObjects = true;		break;		}   else 		targetObject = object;		}		}		Object object;		for (Enumeration elements   = currentObjects.elements();		elements.hasMoreElements();)    {		object = elements.nextElement();		c   = object.getClass();		//System.out.println("trying adapter:" + object);		if ( method.getDeclaringClass().isAssignableFrom(c)) {		//  System.out.println("successful: " + method.getDeclaringClass() + object.getClass());		if (targetObject != null && targetObject != object) {		foundMultipleObjects = true;		break;		}   else 		targetObject = object;		}		}		if (foundMultipleObjects)		showMessage("Ambiguous command invocation.");		else if (targetObject   == null)		showMessage("Command cannot be invoked on   any windowed object");		else 		new uiMethodInvocationManager(this, targetObject, method);		*/	}      }

