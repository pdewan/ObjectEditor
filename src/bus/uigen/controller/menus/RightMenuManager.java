package bus.uigen.controller.menus;import bus.uigen.ObjectEditor;import bus.uigen.uiFrame;import javax.swing.JPopupMenu;import javax.swing.JMenu;import util.misc.Common;import util.models.ADynamicSparseList;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.util.Enumeration;import java.util.Hashtable;import java.util.List;import java.util.Map;import java.util.Vector;import bus.uigen.loggable.ACompositeLoggable;import bus.uigen.oadapters.ObjectAdapter;import bus.uigen.oadapters.PrimitiveAdapter;import bus.uigen.reflect.ClassProxy;import bus.uigen.reflect.MethodProxy;import bus.uigen.undo.CommandListener;import bus.uigen.widgets.VirtualComponent;import bus.uigen.widgets.VirtualMenu;import bus.uigen.attributes.AttributeManager;import bus.uigen.attributes.AttributeNames;import bus.uigen.introspect.AClassDescriptor;import bus.uigen.introspect.ClassDescriptorCache;import bus.uigen.introspect.MethodDescriptorProxy;import bus.uigen.introspect.ClassDescriptorInterface;import bus.uigen.introspect.VirtualMethodDescriptor;import java.beans.MethodDescriptor;public class RightMenuManager {	private static Hashtable<Object, RightMenu> rightMenuCache = new Hashtable();	private static Map<ObjectAdapter, VirtualMenu> subMenuCache = new Hashtable();	// boolean rightMenuInitialized = false;	public static void bindToRightMenu(VirtualComponent component, Object object) {		Object[] objects = { object };		bindToRightMenu(component, objects);	}	public static void bindToRightMenu(VirtualComponent component,			Object[] objects) {		ObjectAdapter[] adapters = new ObjectAdapter[objects.length];		for (int i = 0; i < objects.length; i++) {			adapters[i] = ObjectEditor.toObjectAdapter(objects[i]);			rightMenuCache.remove(adapters[i]);		}		bindToRightMenu(component, adapters);	}	public static void bindToRightMenu(uiFrame theFrame,			VirtualComponent component, Object[] objects) {		ObjectAdapter[] adapters = new ObjectAdapter[objects.length];		for (int i = 0; i < objects.length; i++) {			adapters[i] = ObjectEditor.toObjectAdapter(theFrame, objects[i]);			if (adapters[i] != null) // got a null pointer exception in hashtable			rightMenuCache.remove(adapters[i]);		}		bindToRightMenu(component, adapters);	}	public static void bindToRightMenu(uiFrame theFrame,			VirtualComponent component, Vector<ObjectAdapter> objectVector) {		Object[] objects = objectVector.toArray();		bindToRightMenu(theFrame, component, objects);		/*		 * uiObjectAdapter[] adapters = new uiObjectAdapter[objects.length]; for		 * (int i = 0;i < objects.length; i++) { adapters[i] =		 * ObjectEditor.toObjectAdapter(theFrame, objects[i]);		 * cache.remove(adapters[i]); } bindToRightMenu(component, adapters);		 */	}	public static void bindToRightMenu(VirtualComponent component,			ClassProxy[] classes, ObjectAdapter[] adapters) {		if (adapters.length == 0)			return;		RightMenu menu = getRightMenu(classes, adapters, null);		for (ObjectAdapter adapter : adapters) {			// APopupTriggerListener listener = new			// APopupTriggerListener(adapters[0]);			APopupTriggerListener listener = new APopupTriggerListener(adapter);			if (component != null) {				component.addMouseListener(listener);			}		}	}	public static void bindToRightMenu(VirtualComponent component,			ClassProxy cp, ObjectAdapter adapter) {		ClassProxy[] cps = { cp };		ObjectAdapter[] adapters = { adapter };		bindToRightMenu(component, cps, adapters);	}	public static void bindToRightMenu(VirtualComponent component,			ObjectAdapter adapter) {		if (adapter instanceof PrimitiveAdapter)			return;		ObjectAdapter[] adapters = { adapter };		bindToRightMenu(component, adapters);		/*		 * Object realObject = adapter.getRealObject(); if (realObject == null)		 * return; ClassProxy cp = ClassDescriptor.getTargetClass(realObject);		 * bindToRightMenu(component, cp, adapter);		 */	}	public static void bindToRightMenu(VirtualComponent component,			ObjectAdapter[] adapters) {		ClassProxy[] classProxies = new ClassProxy[adapters.length];		for (int i = 0; i < adapters.length; i++) {			if (adapters[i] == null)				return;			Object realObject = adapters[i].getRealObject();			if (realObject == null)				return;			classProxies[i] = ACompositeLoggable.getTargetClass(realObject);		}		bindToRightMenu(component, classProxies, adapters);	}	public static RightMenu getRightMenu(ClassProxy c,	// CommandListener cl) {			ObjectAdapter cl, Object obj) {		ClassProxy[] classes = { c };		ObjectAdapter[] commandListeners = { cl };		return getRightMenu(classes, commandListeners, obj);		/*		 * RightMenu menu = new RightMenu(); putRightMenu(cl, menu);		 * initRightMenu(menu, c, ClassDescriptorCache.getClassDescriptor(c),		 * cl); //initRightMenu(c, cl);		 */	}	public static void addToRightMenu(ObjectAdapter previousAdapter,			ClassProxy c[],			// CommandListener cl) {			ObjectAdapter[] cl) {		RightMenu menu = getRightMenu(previousAdapter);		if (menu == null)			return;		addToRightMenu(menu, c, cl, null);	}	public static void replaceRightMenu(ObjectAdapter previousAdapter,			ClassProxy c[],			// CommandListener cl) {			ObjectAdapter[] cl) {		RightMenu menu = getRightMenu(previousAdapter);		if (menu == null)			return;		menu.removeAllElements();		addToRightMenu(menu, c, cl, null);	}	public static RightMenu getRightMenu(ClassProxy c[],	// CommandListener cl) {			ObjectAdapter[] cl, Object obj) {		if (cl.length == 0)			return null;		ObjectAdapter firstAdapter = cl[0];		RightMenu menu = getRightMenu(firstAdapter);		if (menu == null) {			menu = new RightMenu();			// we want only the leaf most adapter to be bound to this menu			putRightMenu(firstAdapter, menu);			/*			 * //RightMenu menu = new RightMenu(); for (int i = 0; (i < c.length			 * && i < cl.length); i++) { putRightMenu(cl[i], menu);			 * initRightMenu(menu, c[i],			 * ClassDescriptorCache.getClassDescriptor(c[i]), cl[i]);			 * 			 * }			 */			addToRightMenu(menu, c, cl, obj);		}		return menu;		// initRightMenu(c, cl);	}	public static RightMenu addToRightMenu(RightMenu menu, ClassProxy c[],	// CommandListener cl) {			ObjectAdapter[] cl, Object obj) {		// RightMenu menu = new RightMenu();		for (int i = 0; (i < c.length && i < cl.length); i++) {			// menu.add(AClassDescriptor.getMenuName(c[i]));			String menuName = cl[i].getMenuName();			if (menuName == null) {				menuName = c[i].getSimpleName();			}			menu.add(menuName);			// menu.add(AClassDescriptor.getMenuName(c[i]));			menu.add("-");			int prevMenuSize = menu.getItemCount();			// putRightMenu(cl[i], menu);			// this is confusing, maybe we should have methods of both real and			// view object			// initRightMenu(menu, c[i],			// ClassDescriptorCache.getClassDescriptor(c[i],			// cl[i].getRealObject()), cl[i], obj);			// looks like it will work only with view object			// if (i > 0) {			// RightMenu subMenu = cache.get(cl[i]);			// if (subMenu != null) {			// menu.add(subMenu);			// }			// } else {			initRightMenu(menu, c[i], ClassDescriptorCache.getClassDescriptor(					c[i], cl[i].getViewObject()), cl[i], obj);			// }			if (menu.getItemCount() != prevMenuSize && i < cl.length - 1)				menu.add("-");		}		return menu;		// initRightMenu(c, cl);	}	static void initRightMenu(RightMenu menu, ClassProxy c,	// ViewInfo cd, CommandListener cl) {			ClassDescriptorInterface cd, ObjectAdapter cl, Object obj) {		// if (rightMenuInitialized) return;		// rightMenuInitialized = true;		boolean linePut = false;		MethodDescriptorProxy[] m = cd.getMethodDescriptors();		ADynamicSparseList<MethodDescriptorProxy> sortedMethods = AClassDescriptor				.sortMethodDescriptors(m);		if (m == null)			return;		// RightMenu menu = RightMenuCache.createRightMenu(cl);
		for (int i = 0; i < sortedMethods.size(); i++) {			// if (m[i].getValue(AttributeNames.RIGHT_MENU) != null)			// if			// (ClassDescriptorCache.toBoolean(m[i].getValue(AttributeNames.RIGHT_MENU)))			MethodDescriptorProxy md = sortedMethods.get(i);			if (showInRightMenu(c, cd, md, cl)) {				String label = AMethodProcessor.getLabel(md);				RightMenuItem item = RightMenuManager.addRightMenuMethod(menu,						c,						// m[i].getMethod(),						md, VirtualMethodDescriptor.getVirtualMethod(md),						// m[i].getDisplayName(),						label, cl, obj);				// String labelBelow = (String)				// AttributeManager.getInheritedAttributeValue( md,				// AttributeNames.LABEL_BELOW, null);				String labelBelow = (String) AttributeManager						.getInheritedAttributeValue(md,								AttributeNames.LABEL_BELOW, cl);				if (labelBelow != null)					menu.add(labelBelow);				// menu.add("-");				String toolTipText = AMethodProcessor.getToolTipText(cl						.getUIFrame(), md);				if (toolTipText != null && (toolTipText != ""))					item.menuItem.setToolTipText(toolTipText);				if (cl.getUIFrame() != null)					cl.getUIFrame().getAnnotationManager().put(md, toolTipText,							cl, c);				AMethodProcessor						.setFont(item.menuItem, cl.getUIFrame(), md, cl);			}		}		// MethodDescriptor[] m = cd.ge		MethodProxy[] dynamicMethods = cd.getVirtualMethods();		// System.out.println(" dynamic methods" + dynamicMethods);
	}	public static RightMenu createRightMenu(CommandListener cl) {		RightMenu menu = new RightMenu();		rightMenuCache.put(cl, menu);		return menu;	}	public static void putRightMenu(CommandListener cl, RightMenu menu) {		rightMenuCache.put(cl, menu);	}	public static boolean showInRightMenu(ClassProxy realClass,			ClassDescriptorInterface cd, MethodDescriptorProxy md,			ObjectAdapter adapter) {		Object rightMenuVal = md.getValue(AttributeNames.RIGHT_MENU);		if (rightMenuVal != null)			return (Boolean) rightMenuVal;		/*		 * Object visibleValue = md.getValue(AttributeNames.VISIBLE); if		 * (visibleValue != null) return (Boolean) visibleValue;		 */		MethodProxy m = VirtualMethodDescriptor.getVirtualMethod(md);		if (cd.isDynamic(md) || !m.isMethod()				|| !Modifier.isStatic(m.getModifiers())) {			// || (m.getDeclaringClass().equals(realClass) &&			// !Modifier.isStatic(m.getModifiers()))) {			return AMethodProcessor.isDisplayedCommand(adapter.getUIFrame(),					md, m, adapter.getRealObject(), adapter)					&& AMethodProcessor.isRightMenuMethod(adapter.getUIFrame(),							md, m, adapter.getRealObject(), adapter);			// if (/*localNum++ < METHODS_IN_RIGHT_MENU &&*/ !(			// (ClassDescriptor) cd).ignoreMethod(m.getName())) {			// return true;			// }		}// md.setValue(AttributeNames.RIGHT_MENU, new Boolean(true));		return false;	}	// public static void addRightMenuMethod(RightMenu menu, Class c,	public static RightMenuItem addRightMenuMethod(RightMenu menu,			ClassProxy c, MethodDescriptorProxy md, MethodProxy m,			String label,			// CommandListener cl) {			ObjectAdapter cl, Object obj) {				RightMenuItem item = new RightMenuItem(label, md, m, cl);		Object rightMenuObject = cl.getRealObject();		if (rightMenuObject != null)			item.setObject(rightMenuObject);		else			item.setObject(cl.computeAndMaybeSetViewObject());				menu.add(item);		return item;	}	public static RightMenu getRightMenu(ClassProxy c) {		return (RightMenu) rightMenuCache.get(c);	}	public static RightMenu getRightMenu(CommandListener cl) {		return (RightMenu) rightMenuCache.get(cl);	}	public static Enumeration<RightMenu> getRightMenus() {		return rightMenuCache.elements();	}}