package bus.uigen.compose;
import java.awt.Color;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import javax.swing.Icon;import javax.swing.ImageIcon;import javax.swing.JLabel;import util.trace.Tracer;import bus.uigen.uiFrame;import bus.uigen.attributes.AttributeManager;import bus.uigen.attributes.AttributeNames;import bus.uigen.controller.menus.AMethodProcessor;import bus.uigen.introspect.ClassDescriptorCache;import bus.uigen.introspect.ClassDescriptorInterface;import bus.uigen.introspect.IntrospectUtility;import bus.uigen.introspect.MethodDescriptorProxy;import bus.uigen.loggable.ACompositeLoggable;import bus.uigen.oadapters.ObjectAdapter;import bus.uigen.reflect.ClassProxy;import bus.uigen.reflect.MethodProxy;import bus.uigen.widgets.VirtualButton;import bus.uigen.widgets.VirtualLabel;import bus.uigen.widgets.events.VirtualActionEvent;import bus.uigen.widgets.events.VirtualActionListener;//newadds
//this just holds a method , display name, and object.
public class ButtonCommand implements VirtualActionListener, PropertyChangeListener {	
  String displayName= null;   String displayIcon = null;
   MethodProxy method= null;   MethodProxy preMethod = null;   Object targetObject= null;   Object initialObject = null;   ObjectAdapter targetAdapter = null;   uiFrame frame= null;   MethodDescriptorProxy md = null;   String toolTipText = null;   String[] dynamicCommandParams = new String[1];   boolean manuallyRetargetedObject; // not sure if we need this  //public JButton button = null;  public VirtualButton button = null;

  //changed to see if you don't need the frame ..orignally added it to support uimethinvmgr invoker below  //but found that it is overloaded so differet constr. set.
  
  //dunno why but this seems to need the uiFrame to work properly with method 
  //invocations... maybe in future see if things would work out if I just called the invokeMethod form UImim  public ButtonCommand(uiFrame _frame, Object _target, MethodDescriptorProxy _md, MethodProxy m, ObjectAdapter theAdapter) {	frame = _frame;	targetObject = _target;	initialObject = targetObject;	targetAdapter = theAdapter;
    method = m;	md = _md;//	if (md != null){//		displayName = (String) md.getValue(AttributeNames.LABEL);//		displayIcon = (String) md.getValue(AttributeNames.ICON);//		if (displayName == null) {//			displayName = md.getDisplayName();//			if ((Boolean) AttributeManager.getInheritedAttribute(_md, AttributeNames.LABEL_IS_UPPERCASE, null).getValue())//				displayName =  displayName.toUpperCase();//			displayName.replaceAll("OR","/").replaceAll("_","").trim();//			/*//			if (Boolean) ClassDescriptor.getInheritedAttribute(_md, AttributeNames.LABEL_IS_UPPERCASE).getValue()) 
//    displayName = md.getDisplayName().toUpperCase().replaceAll("OR","/").replaceAll("_","").trim();  //think I need to add this since I updated the thing.;//	*///	//displayName = md.getDisplayName();//		}
//	}//	else displayName = m.getName();//	//	String toolTipText = AMethodProcessor.getToolTipText(frame, md);//	if (toolTipText != null && !toolTipText.equals(""))//		setToolTipText(toolTipText);	//preMethod = uiBean.getPre(method, RemoteSelector.getClass(_target));	preMethod = IntrospectUtility.getPre(method, ACompositeLoggable.getTargetClass(_target));   	dynamicCommandParams[0] = m.getName();	frame.addCustomOrAutomaticButton(this);	initAttributes();
	  }  public static ButtonCommand createCommandFromButton (uiFrame frame, Object target, ClassProxy c, MethodProxy m, VirtualButton button, ObjectAdapter adapter) {		ClassDescriptorInterface cd = ClassDescriptorCache.getClassDescriptor(c, target);		MethodDescriptorProxy md = cd.getMethodDescriptor(m);		ButtonCommand command = new ButtonCommand(frame, target, md, m,adapter);		command.setButton(button);		button.addActionListener(command);		return command;	}    void initAttributes() {	  if (md != null){		  md.addPropertyChangeListener(this);//			displayName = (String) md.getValue(AttributeNames.LABEL);//			displayIcon = (String) md.getValue(AttributeNames.ICON);			displayName = getLabel();			displayIcon = getIcon();			if (displayName == null) {				displayName = md.getDisplayName();//				if ((Boolean) AttributeManager.getInheritedAttribute(md, AttributeNames.LABEL_IS_UPPERCASE, targetAdapter).getValue())//					displayName =  displayName.toUpperCase();//				if ((Boolean) AttributeManager.getInheritedAttribute(md, AttributeNames.LABEL_IS_LOWERCASE, targetAdapter).getValue())//					displayName =  displayName.toLowerCase();				String labelCase = ((String) AttributeManager.getInheritedAttribute(md, AttributeNames.LABEL_CASE, targetAdapter).getValue());				if (labelCase.equals(AttributeNames.UPPER_CASE))					displayName =  displayName.toUpperCase();				else if (labelCase.equals(AttributeNames.LOWER_CASE))					displayName =  displayName.toLowerCase();				displayName.replaceAll("OR","/").replaceAll("_","").trim();				if ((Boolean) AttributeManager.getInheritedAttribute(md, AttributeNames.LABEL_HAS_NO_BLANKS, targetAdapter).getValue())					displayName =  displayName.replaceAll(" ","");				/*				if (Boolean) ClassDescriptor.getInheritedAttribute(_md, AttributeNames.LABEL_IS_UPPERCASE).getValue()) 	    displayName = md.getDisplayName().toUpperCase().replaceAll("OR","/").replaceAll("_","").trim();  //think I need to add this since I updated the thing.;		*/		//displayName = md.getDisplayName();			}		}		else displayName = method.getName();				//String toolTipText = AMethodProcessor.getToolTipText(frame, md);		String toolTipText = getToolTipText();		if (toolTipText != null && !toolTipText.equals(""))			setToolTipText(toolTipText);	    }  public void checkPre() {	  if (button == null)		  return;	  try {		  Object[] params = {};		  boolean result;		  //VirtualMethod preMethod = uiBean.getPre(method, object.getClass());		  if (preMethod == null || targetObject == null) {		  	button.setEnabled(true);		  	return;		  }		 		  else if (method.isDynamicCommand()) {			  			  //Object[] params = {};				   result = ((Boolean) preMethod.invoke(targetObject, dynamicCommandParams)).booleanValue();			 			  		  } 		  else {  		   result = ((Boolean) preMethod.invoke(targetObject, params)).booleanValue();//		  button.setEnabled(result);//		  button.validate();		  }//		  System.out.println("Setting enabled status of " + button + " to " + result);		  button.setEnabled(result);//		  button.repaint();		  button.validate();//		  targetAdapter.getUIFrame().repaint();//		  targetAdapter.getUIFrame().validate();		  	  } catch (Exception e) {		  if (button != null)		  button.setEnabled(true);	  }	    }
    public String getDisplayIcon() {	  return displayIcon;  }
  public void setDisplayName(String _displayName) {
	  displayName = _displayName;
  }  
  public void setTargetObject(Object newTarget) {  //can get away with this if the target and source have the 													//class becasue the methods are exactly the same  													//however, need a new method for the target if they differ in class
	  targetObject = newTarget;	  manuallyRetargetedObject = true;
  }    public void setToolTipText (String theText) {	  toolTipText = theText;  }    public void setButton(VirtualButton bttn) {	  button = bttn;
	  //displayName = bttn.getLabel();	  displayName = bttn.getText();	  if (toolTipText != null)	  bttn.setToolTipText(toolTipText);		  frame.getAnnotationManager().put(md, toolTipText, frame.getOriginalAdapter(), 			  //RemoteSelector.getClass(targetObject));	  		  ACompositeLoggable.getTargetClass(targetObject));	  //frame.getAnnotationManager().put(displayName, toolTipText);	  AMethodProcessor.setFont(button, frame, md, frame.getOriginalAdapter());	  checkPre();  }  public VirtualButton getButton() {	  return button;  }
    
  public void setTargetObject(Object newTarget, MethodProxy m) {  //hence the overriding of this method
	  method = m;
	  targetObject = newTarget; 
  }    public void setTargetObjectAdapter(ObjectAdapter theTargetAdapter) { 	 targetAdapter = theTargetAdapter;	 initAttributes();  }  
    public Object getTargetObject() {
	  return targetObject; 
  }  public ObjectAdapter getTargetObjectAdapter() {	  return targetAdapter;  }
    public uiFrame getTopFrame() {return frame;}
    /*  public Command(Object _target, String label, Method m) {	  targetObject = _target;
					method = m;
    displayName = label;
  }  */  public MethodProxy getMethod() {	  return method;  }
  
  public void actionPerformed(VirtualActionEvent e) {
    //Object object = frame.getAdapter().getRealObject();	//Object object = frame.toUIGen;	  if (!manuallyRetargetedObject && targetAdapter != null) { // manually bound button may not have target adapter		  targetObject = targetAdapter.getRealObject(); // adapter may have been retargeted	  }//	  Object currentObject = targetAdapter.getRealObject();//	  if (currentObject != targetObject){//		  Tracer.info("Button command retargeted to:" + )//	  }
    if (method != null) {
      bus.uigen.controller.MethodInvocationManager iman = new bus.uigen.controller.MethodInvocationManager(frame, targetObject,
									     method);	//uiMethodInvocationManager iman = new uiMethodInvocationManager(targetObject, method);									 
    //frame.doImplicitRefresh();    }
  }
  
  public String toString() {
	  return displayName;
  }
  
  public MethodDescriptorProxy getMethodDescriptor() {
	  return md;
  }    public int getPosition () {   	Object pos = AttributeManager.getInheritedAttribute (frame, md, AttributeNames.POSITION, targetAdapter).getValue();   	//if (row == null) return row = AttributeNames.getDefault();  	return ((Integer) pos).intValue();  }  public Object getAddConstraint () {	  return getAttributeValue(AttributeNames.ADD_CONSTRAINT);//   	Object retVal = AttributeManager.getInheritedAttribute (frame, md, AttributeNames.ADD_CONSTRAINT, null);   	//if (row == null) return row = AttributeNames.getDefault();//  	return retVal;  }     public int getRow () {   	Object row = AttributeManager.getInheritedAttribute (frame, md, AttributeNames.ROW, targetAdapter).getValue();   	if (row == null) return -1;   	//if (row == null) return row = AttributeNames.getDefault();  	return ((Integer) row).intValue();  }   public Object getAttributeValue(String anAttributeName) {	   return AttributeManager.getInheritedAttribute (frame, md, anAttributeName, targetAdapter).getValue();	     }   	public Integer getAddWidthConstraint() {		return (Integer) getAttributeValue(AttributeNames.ADD_WIDTH_CONSTRAINT);				}		public Double getAddWeightXConstraint() {		return (Double) getAttributeValue(AttributeNames.ADD_WEIGHT_X_CONSTRAINT);				}	public Integer getAddFillConstraint() {		return (Integer) getAttributeValue(AttributeNames.ADD_FILL_CONSTRAINT);				}			public Double getAddWeightYConstraint() {		return (Double) getAttributeValue(AttributeNames.ADD_WEIGHT_Y_CONSTRAINT);				}		public Integer getAddAnchorConstraint() {		return ((Integer) getAttributeValue(AttributeNames.ADD_ANCHOR_CONSTRAINT));				}	public boolean getStretchableByParent() {		return (Boolean) getAttributeValue(AttributeNames.STRETCHABLE_BY_PARENT);				}		   public int getColumn () {   	Object col = AttributeManager.getInheritedAttribute (frame, md, AttributeNames.COLUMN, targetAdapter).getValue();   	//if (col == null) return -1;  	return ((Integer) col).intValue();  }   public String getLabelAbove () {   	return (String) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.LABEL_ABOVE, targetAdapter).getValue();  }   public String getLabelBelow() {   	return (String) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.LABEL_BELOW, targetAdapter).getValue();  }   public String getLabelLeft() {   	return (String) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.LABEL_LEFT, targetAdapter).getValue();  }   public String getLabelRight() {   	return (String) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.LABEL_RIGHT, targetAdapter).getValue();  }   public Color getComponentBackground() {	   	return (Color) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.COMPONENT_BACKGROUND, targetAdapter).getValue();	  }      public Color getComponentForeground() {	   	return (Color) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.COMPONENT_FOREGROUND, targetAdapter).getValue();	  }   public Integer getComponentWidth() {	   	return (Integer) AttributeManager.getInheritedAttributeValue (this.getTargetObject(), md, AttributeNames.COMPONENT_WIDTH, targetAdapter);	  }   public Integer getLabelWidth() {	   	return (Integer) AttributeManager.getInheritedAttributeValue (this.getTargetObject(), md, AttributeNames.LABEL_WIDTH, targetAdapter);	  }   public Integer getComponentHeight() {	   	return (Integer) AttributeManager.getInheritedAttributeValue (this.getTargetObject(), md, AttributeNames.COMPONENT_HEIGHT, targetAdapter);	  }      public static boolean isFileName (String string) {		return string.toLowerCase().endsWith(".gif");	}   public static void maybeChangeLabel (MethodDescriptorProxy md, VirtualButton b) {		if (md == null) return;			//MethodDescriptor md = cdIncDec.getMethodDescriptor(incrementer.getName());			String iconFile = (String) md.getValue(AttributeNames.ICON);			String label = (String) md.getValue(AttributeNames.LABEL);			maybeChangeLabelAndIcon (b, label, iconFile);			/*			if (iconFile == null && label!= null && isFileName(label))				iconFile = label;			if (iconFile != null) {				 Icon icon = new ImageIcon(iconFile);				 b.setIcon(icon);				 b.setLabel("");				 //return;			}			if (label != null)				b.setLabel(label);				*/					}	public static void maybeChangeLabelAndIcon(VirtualButton b, String label,			String iconFile) {		if (iconFile == null && label != null && isFileName(label))			iconFile = label;		if (iconFile != null) {			Icon icon = new ImageIcon(iconFile);			b.setIcon(icon);			//b.setLabel("");			b.setText("");			// return;		}		if (label != null)			//b.setLabel(label);			b.setText(label);	}	public static void maybeChangeLabelOrIcon(VirtualButton b, String label,			String iconFile) {		if (iconFile == null && label != null && isFileName(label))			iconFile = label;		if (iconFile != null) {			Icon icon = new ImageIcon(iconFile);			b.setIcon(icon);			//b.setLabel("");			b.setText("");			return;		}		if (label != null)			//b.setLabel(label);			b.setText(label);	}		public static void maybeChangeLabelOrIcon(JLabel b, String label,			String iconFile) {		if (iconFile == null && label != null && isFileName(label))			iconFile = label;		if (iconFile != null) {			Icon icon = new ImageIcon(iconFile);			b.setIcon(icon);			b.setText("");			return;		}		if (label != null)			b.setText(label);	}	public static void maybeChangeLabelOrIcon(VirtualLabel b, String label,			String iconFile) {		if (iconFile == null && label != null && isFileName(label))			iconFile = label;		if (iconFile != null) {			Icon icon = new ImageIcon(iconFile);			b.setIcon(icon);			b.setText("");			return;		}		if (label != null)			b.setText(label);	}		public String getClassViewGroup() {	   	return (String) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.CLASS_VIEW_GROUP, targetAdapter).getValue();	  }	// maybe system defaults should not be looked at getInheritedAttribute	public String getLabel() {	   	return (String) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.LABEL, targetAdapter).getValue();	  }		public String getIcon() {	   	return (String) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.ICON, targetAdapter).getValue();	  }		public String getToolTipText() {		String retVal =  (String) AttributeManager.getInheritedAttribute (frame, md, AttributeNames.EXPLANATION, targetAdapter).getValue();		if (retVal == null)			retVal = "";		return retVal;	}						@Override	public void propertyChange(PropertyChangeEvent anEvent) {		String attributeName = anEvent.getPropertyName();		MethodDescriptorProxy aMethodProxy = (MethodDescriptorProxy) anEvent.getSource();		if (attributeName == null || button == null) return;		if (attributeName.equals(AttributeNames.LABEL))			//			maybeChangeLabelAndIcon(button, (String) anEvent.getNewValue(), null); 			button.setText((String) anEvent.getNewValue());		else if (attributeName.equals(AttributeNames.ICON))			maybeChangeLabelAndIcon(button, null, (String) anEvent.getNewValue()); //			button.setIcon((String) anEvent.getNewValue());		else if (attributeName.equals(AttributeNames.EXPLANATION))			button.setToolTipText((String) anEvent.getNewValue());		else if (attributeName.equals(AttributeNames.FONT))			  AMethodProcessor.setFont(button, frame, md, frame.getOriginalAdapter());		else if (attributeName.equals(AttributeNames.COMPONENT_BACKGROUND)) 				button.setBackground((Color) anEvent.getNewValue());		else if (attributeName.equals(AttributeNames.COMPONENT_FOREGROUND))			button.setForeground((Color) anEvent.getNewValue());		else			Tracer.info(this, "Attribute change not honored, please finish this code");	}  
}
