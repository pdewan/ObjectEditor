package bus.uigen.sadapters;import util.trace.Tracer;import bus.uigen.uiFrame;import bus.uigen.reflect.ClassProxy;import bus.uigen.reflect.RemoteSelector;public class EnumToEnumerationFactory extends  AbstractConcreteTypeFactory implements ConcreteEnumerationFactory  {	public ConcreteEnumeration toConcreteEnumeration(ClassProxy theTargetClass, Object theTargetObject, uiFrame theFrame) {
		return toConcreteEnumerationStatic (theTargetClass, theTargetObject, theFrame);		//if (!(uiBean.isVector(theGVectorClass))) return null;		/*		if (theTargetClass.isEnum())			return  new EnumToEnumeration(theTargetClass, theTargetObject,  theFrame, null);		else {			Class theOuterClass = getOuterEnumeration(theTargetClass);			if (theOuterClass == null)				return null;			return  new EnumToEnumeration(theTargetClass, theTargetObject,  theFrame, theOuterClass);			//if (isInnerEnumeration(theTargetClass))		}		*/			
		//if (!EnumToEnumerationFactory.isEnumeration(theTargetClass)) return null;		//return  new EnumToEnumeration(theTargetClass, theTargetObject,  theFrame);		
		//return vectorStructure;		
		//return new GenericVectorToVectorStructure(theGVectorClass, theGVector);	}	public static boolean isInnerEnumeration(String className) {		int dollarPos = className.lastIndexOf('$');		if (dollarPos < 0) return false;		String potentialIntegerString = className.substring(dollarPos + 1, className.length());		try {			int num = Integer.parseInt(potentialIntegerString );			Tracer.warning("Guessing from its name that:" + className + " is an enumeration class.");			return true;		} catch (Exception e) {			return false;		}			}	public static boolean isInnerEnumeration(ClassProxy innerEnum) {		return getOuterEnumeration(innerEnum) != null;		/*		int dollarPos = className.lastIndexOf('$');		if (dollarPos < 0) return false;		String potentialIntegerString = className.substring(dollarPos + 1, className.length());		try {			int num = Integer.parseInt(potentialIntegerString );			Message.warning("Guessing from its name that:" + className + " is an enumeration class.");			return true;		} catch (Exception e) {			return false;		}		*/			}	public static ClassProxy getOuterEnumeration (ClassProxy innerEnum) {		String className = innerEnum.getName();		int dollarPos = className.lastIndexOf('$');		if (dollarPos < 0) return null;		String potentialIntegerString = className.substring(dollarPos + 1, className.length());				try {			int num = Integer.parseInt(potentialIntegerString );			//Message.warning("Guessing from its name that:" + className + " is an enumeration class.");			String outerClassName = className.substring(0, dollarPos);			//ClassProxy outerClass = RemoteSelector.forName(outerClassName);			ClassProxy outerClass = innerEnum.forName(outerClassName);			if (outerClass.isEnum())				return outerClass;			else				return null;		} catch (Exception e) {			return null;		}			}
	public EnumToEnumeration createChecker() {		return new EnumToEnumeration();
	}
	public ConcreteType toConcreteType(ClassProxy theTargetClass, Object theTargetObject, uiFrame theFrame, boolean forceConversion) {
		return toConcreteEnumeration(theTargetClass, theTargetObject, theFrame);	}	
	public Class getConcreteType () {		return EnumToEnumeration.class;
	}
	public ConcreteType createConcreteType () {		return createChecker();
	}		public static boolean isEnumeration (ClassProxy theTargetClass) {			//return isEnumerationStatic (theTargetClass);				//GenericHashtableToHashtableStructure checker = new GenericHashtableToHashtableStructure();		return theTargetClass.isEnum() 				|| isInnerEnumeration(theTargetClass.getName());				/*		EnumToEnumeration checker = createChecker();		checker.setMethods(theTargetClass);		return checker.isEnumeration();		*/	}	static ConcreteEnumeration toConcreteEnumerationStatic (ClassProxy theTargetClass, Object theTargetObject, uiFrame theFrame) {		if (theTargetClass.isEnum())			return  new EnumToEnumeration(theTargetClass, theTargetObject,  theFrame, null);		else {			ClassProxy theOuterClass = getOuterEnumeration(theTargetClass);			if (theOuterClass == null)				return null;			return  new EnumToEnumeration(theTargetClass, theTargetObject,  theFrame, theOuterClass);			//if (isInnerEnumeration(theTargetClass))		}		/*		if (!EnumToEnumerationFactory.isEnumeration(theTargetClass)) return null;		return  new EnumToEnumeration(theTargetClass, theTargetObject,  theFrame);		*/			}	public static ConcreteEnumeration toConcreteEnumerationStatic (ClassProxy theTargetClass) {		return 	toConcreteEnumerationStatic (theTargetClass, null, null);	}	@Override	public String getPatternName() {		// TODO Auto-generated method stub		return util.annotations.StructurePatternNames.ENUM_TYPE;	}	@Override	public String getPatternPath() {		// TODO Auto-generated method stub		return "util.annotations.StructurePatternNames.ENUM_TYPE";	}	
}
