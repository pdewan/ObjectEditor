package bus.uigen.sadapters;import util.annotations.StructurePatternNames;import util.trace.Tracer;import bus.uigen.uiFrame;
import bus.uigen.introspect.IntrospectUtility;import bus.uigen.reflect.ClassProxy;public  class GenericShapeToShapeFactory extends  AbstractConcreteTypeFactory implements ConcreteShapeFactory  {	static ConcreteShapeFactory pointFactory = new GenericPointToPointFactory();	static ConcreteShapeFactory rectangleFactory = new GenericRectangleToRectangleFactory();	static ConcreteShapeFactory ovalFactory = new GenericOvalToOvalFactory();	static ConcreteShapeFactory lineFactory = new GenericLineToLineFactory();	static ConcreteShapeFactory arcFactory = new GenericArcToArcFactory();	static ConcreteShapeFactory curveFactory = new GenericCurveToCurveFactory();	static ConcreteShapeFactory textFactory = new GenericTextShapeToTextShapeFactory();	static ConcreteShapeFactory stringFactory = new GenericStringShapeToStringShapeFactory();	static ConcreteShapeFactory imageFactory = new GenericImageShapeToImageShapeFactory();	static ConcreteShapeFactory awtShapeFactory = new GenericAWTShapeToAWTShapeFactory();	static ConcreteShapeFactory labelFactory = new GenericLabelShapeToLabelShapeFactory();			public ConcreteShape toConcreteShape(ClassProxy theTargetClass, Object theTargetObject, uiFrame theFrame) {
		int whichShape = IntrospectUtility.NO_SHAPE;
		if (theTargetObject == null) return null;		whichShape = IntrospectUtility.whichShape(theTargetClass);	  //if (textMode ||  whichShape == uiBean.NO_SHAPE) return null;		if (whichShape == IntrospectUtility.NO_SHAPE) return null;//	   switch (whichShape) {//	   case uiBean.POINT_SHAPE: //		   return  new GenericPointToPoint(theTargetObject, theFrame);
//	   case uiBean.RECTANGLE_SHAPE: //		   return  new GenericRectangleToRectangle(theTargetObject, theFrame);	
//	   case uiBean.OVAL_SHAPE: //		   return  new GenericOvalToOval(theTargetObject, theFrame);
//		case uiBean.LINE_SHAPE: //		   return  new GenericLineToLine(theTargetObject, theFrame);
//		case uiBean.TEXT_SHAPE: //				return  new GenericTextShapeToTextShape(theTargetObject, theFrame);//		case uiBean.LABEL_SHAPE://			return  new GenericLabelShapeToLabelShape(theTargetObject, theFrame);//		case uiBean.ARC_SHAPE://			return  new GenericArcToArc(theTargetObject, theFrame);//		case uiBean.CURVE_SHAPE://			return new GenericCurveToCurve(theTargetObject, theFrame);//	   default: return null;
//	   }		ConcreteLocatableShape retVal = null;	   switch (whichShape) {	   case IntrospectUtility.POINT_SHAPE: 		   retVal =   new GenericPointToPoint(theTargetObject, theFrame);		   retVal.setPatternName(StructurePatternNames.POINT_PATTERN);//		   retVal.setPatternName(pointFactory.getPatternName());		   retVal.setPatternPath(pointFactory.getPatternPath());		   return retVal;	   case IntrospectUtility.RECTANGLE_SHAPE: 		   retVal =   new GenericRectangleToRectangle(theTargetObject, theFrame);		   retVal.setPatternName(StructurePatternNames.RECTANGLE_PATTERN);//		   retVal.setPatternName(rectangleFactory.getPatternName());		   retVal.setPatternPath(rectangleFactory.getPatternPath());		   return retVal;	   case IntrospectUtility.OVAL_SHAPE: 		   retVal =   new GenericOvalToOval(theTargetObject, theFrame);		   retVal.setPatternName(StructurePatternNames.OVAL_PATTERN);//		   retVal.setPatternName(ovalFactory.getPatternName());		   retVal.setPatternPath(ovalFactory.getPatternPath());		   return retVal;		case IntrospectUtility.LINE_SHAPE: 		   retVal =   new GenericLineToLine(theTargetObject, theFrame);		   retVal.setPatternName(StructurePatternNames.LINE_PATTERN);//		   retVal.setPatternName(lineFactory.getPatternName());		   retVal.setPatternPath(lineFactory.getPatternPath());		   return retVal;		case IntrospectUtility.TEXT_SHAPE: 				retVal =   new GenericTextShapeToTextShape(theTargetObject, theFrame);				   retVal.setPatternName(textFactory.getPatternName());				   retVal.setPatternPath(textFactory.getPatternPath());				retVal.setPatternName(StructurePatternNames.TEXT_PATTERN);				return retVal;		case IntrospectUtility.STRING_SHAPE: 			retVal =   new GenericStringShapeToStringShape(theTargetObject, theFrame);//			   retVal.setPatternName(stringFactory.getPatternName());			retVal.setPatternName(StructurePatternNames.STRING_PATTERN);			   retVal.setPatternPath(stringFactory.getPatternPath());			return retVal;		case IntrospectUtility.IMAGE_SHAPE: 			retVal =   new GenericImageShapeToImageShape(theTargetObject, theFrame);//			   retVal.setPatternName(stringFactory.getPatternName());			retVal.setPatternName(StructurePatternNames.IMAGE_PATTERN);			   retVal.setPatternPath(imageFactory.getPatternPath());			return retVal;		case IntrospectUtility.LABEL_SHAPE:			retVal =   new GenericLabelShapeToLabelShape(theTargetObject, theFrame);//			   retVal.setPatternName(labelFactory.getPatternName());			retVal.setPatternName(StructurePatternNames.LABEL_PATTERN);			   retVal.setPatternPath(labelFactory.getPatternPath());			return retVal;		case IntrospectUtility.ARC_SHAPE:			retVal =   new GenericArcToArc(theTargetObject, theFrame);//			   retVal.setPatternName(arcFactory.getPatternName());			retVal.setPatternName(StructurePatternNames.ARC_PATTERN);			   retVal.setPatternPath(arcFactory.getPatternPath());			return retVal;		case IntrospectUtility.CURVE_SHAPE:			retVal =  new GenericCurveToCurve(theTargetObject, theFrame);//			   retVal.setPatternName(curveFactory.getPatternName());			retVal.setPatternName(StructurePatternNames.CURVE_PATTERN);			   retVal.setPatternPath(curveFactory.getPatternPath());			return retVal;		case IntrospectUtility.AWT_SHAPE://			retVal =  new GenericAWTShapeToAWTShape(theTargetObject, theFrame);////			   retVal.setPatternName(curveFactory.getPatternName());//			retVal.setPatternName(StructurePatternNames.AWT_SHAPE_PATTERN);////			   retVal.setPatternPath(awtShapeFactory.getPatternPath());////			return retVal;	   default: return null;	   }			}	public ConcreteLocatableShape toConcreteXYPoint(ClassProxy theTargetClass, Object theTargetObject, uiFrame theFrame) {		int whichShape = IntrospectUtility.NO_SHAPE;		if (theTargetObject == null) return null;		whichShape = IntrospectUtility.whichShape(theTargetClass);	  //if (textMode ||  whichShape == uiBean.NO_SHAPE) return null;		if (whichShape == IntrospectUtility.NO_SHAPE) return null;		return  new GenericPointToPoint(theTargetObject, theFrame);		/*	   switch (whichShape) {	   case uiBean.POINT_SHAPE: 		   return  new GenericPointToPoint(theTargetObject, theFrame);	   case uiBean.RECTANGLE_SHAPE: 		   return  new GenericRectangleToRectangle(theTargetObject, theFrame);		   case uiBean.OVAL_SHAPE: 		   return  new GenericOvalToOval(theTargetObject, theFrame);		case uiBean.LINE_SHAPE: 		   return  new GenericLineToLine(theTargetObject, theFrame);		case uiBean.TEXT_SHAPE: 				return  new GenericTextShapeToTextShape(theTargetObject, theFrame);				 	   default: return null;	   	   }	   */			}
	
	public ConcreteType toConcreteType(ClassProxy theTargetClass, Object theTargetObject, uiFrame theFrame, boolean forceConversion) {
		return toConcreteShape(theTargetClass, theTargetObject, theFrame);	}	@Override	public ConcreteType createConcreteType() {		//Message.error("createConcreteType Should not have been called");		// TODO Auto-generated method stub		return null;	}	@Override	public Class getConcreteType() {		// TODO Auto-generated method stub				 return GenericPointToPoint.class;	}	@Override	public String getPatternName() {		// TODO Auto-generated method stub		//Message.error("getPatternName Should not have been called");		return null;	}	@Override	public String getPatternPath() {		// TODO Auto-generated method stub		//Message.error("getPatternPath should not have been called");		return null;	}
		
}
